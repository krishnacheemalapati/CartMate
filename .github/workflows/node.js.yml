# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI



on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

defaults:
      run:
        working-directory: ./my-app

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1
        cache-dependency-path: my-app/package-lock.json`
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: npm install and build
      run: |
        npm ci 
        npm run build --if-present
      working-directory: ./my-app
    - name: Checkout
      uses: actions/checkout@v3
    - name: "Upload GitHub Pages artifact"
        description: "A composite action that prepares your static assets to be deployed to GitHub Pages"
        author: "GitHub"
        inputs:
          name:
            description: 'Artifact name'
            required: false
            default: 'github-pages'
          path:
            description: "Path of the directory containing the static assets."
            required: true
            default: "_site/"
          retention-days:
            description: "Duration after which artifact will expire in days."
            required: false
            default: "1"
        runs:
          using: composite
          steps:
            - name: Archive artifact
              shell: sh
              if: runner.os == 'Linux'
              run: |
                chmod -c -R +rX "$INPUT_PATH" | while read line; do
                  echo "::warning title=Invalid file permissions automatically fixed::$line"
                done
                tar \
                  --dereference --hard-dereference \
                  --directory "$INPUT_PATH" \
                  -cvf "$RUNNER_TEMP/artifact.tar" \
                  --exclude=.git \
                  --exclude=.github \
                  .
              env:
                INPUT_PATH: ${{ inputs.path }}

            # Switch to gtar (GNU tar instead of bsdtar which is the default in the MacOS runners so we can use --hard-dereference)
            - name: Archive artifact
              shell: sh
              if: runner.os == 'macOS'
              run: |
                chmod -v -R +rX "$INPUT_PATH" | while read line; do
                  echo "::warning title=Invalid file permissions automatically fixed::$line"
                done
                gtar \
                  --dereference --hard-dereference \
                  --directory "$INPUT_PATH" \
                  -cvf "$RUNNER_TEMP/artifact.tar" \
                  --exclude=.git \
                  --exclude=.github \
                  .
              env:
                INPUT_PATH: ${{ inputs.path }}

            # Massage the paths for Windows only
            - name: Archive artifact
              shell: bash
              if: runner.os == 'Windows'
              run: |
                tar \
                  --dereference --hard-dereference \
                  --directory "$INPUT_PATH" \
                  -cvf "$RUNNER_TEMP\artifact.tar" \
                  --exclude=.git \
                  --exclude=.github \
                  --force-local \
                  "."
              env:
                INPUT_PATH: ${{ inputs.path }}

            - name: Upload artifact
              uses: actions/upload-artifact@main
              with:
                name: ${{ inputs.name }}
                path: ${{ runner.temp }}/artifact.tar
                retention-days: ${{ inputs.retention-days }}

  # Deploy job
  deploy:
    # Add a dependency to the build job
    needs: build

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
        working-directory: ./my-app

